# Generated by Django 5.2.6 on 2025-09-13 16:08

import bookings.models
import django.db.models.deletion
import django_enumfield.db.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('events', '0001_initial'),
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_enumfield.db.fields.EnumField(default=1, enum=bookings.models.Booking.BOOKING_STATUS)),
                ('total_price_cents', models.PositiveIntegerField(default=0)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('request_id', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('events_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='events.events')),
                ('hold_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='booking', to='inventory.inventoryhold')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='accounts.user')),
            ],
            options={
                'db_table': 'booking',
            },
        ),
        migrations.CreateModel(
            name='BookingItem',
            fields=[
                ('booking_item_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price_cents', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('booking_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='bookings.booking')),
                ('seat_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.seat')),
                ('ticket_type_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.tickettype')),
            ],
            options={
                'db_table': 'booking_item',
            },
        ),
        migrations.CreateModel(
            name='Cancellation',
            fields=[
                ('cancellation_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cancellations', to='bookings.booking')),
            ],
            options={
                'db_table': 'cancellation',
            },
        ),
        migrations.CreateModel(
            name='EventWaitlist',
            fields=[
                ('event_waitlist_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position', models.PositiveIntegerField()),
                ('status', django_enumfield.db.fields.EnumField(default=1, enum=bookings.models.EventWaitlist.WAITLIST_STATUS)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('events_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist', to='events.events')),
                ('ticket_type_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.tickettype')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist_entries', to='accounts.user')),
            ],
            options={
                'db_table': 'event_waitlist',
                'unique_together': {('events_id', 'ticket_type_id', 'user_id')},
            },
        ),
    ]
